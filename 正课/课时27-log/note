# LOG
- https://www.cnblogs.com/yyds/p/6901864.html
- logging
  - logging 模块提供模块级别的函数记录日志
  - 包括四大组件

## 1. 日志相关的概念
- 日志的级别（level）
  - 不同的用户关注的不同的信息
  - DEBUG
  - INFO
  - NOTICE
  - WARNING
  - ERROR
  - CRITICAL
  - ALERT
  - EMERGENCY
- 写日志是 IO 操作，不要过于频繁
- LOG 的作用
  - 调试
  - 了解软件的运行情况
  - 分析定位原因
- 日志信息
  - time
  - 地点（哪些函数中出的问题）
  - level
  - 内容
  
- 成熟的第三方日志模块
  - log4j
  - log4php
  - logging
  
 # 2 logging 模块
- 日志级别
  - 级别可以自定义，但模块已定义了以下级别：
    - DEBUG
    - INFO
    - WARNING
    - ERROR
    - CRITICAL
- 初始化/写日志时，需要指定级别
  - 只有级别高于或等于指定级别时才会被记录
- 使用方式
  - 直接使用 logging (封装了其他组件)
  - 若不能满足要求，可以用 logging 四大组件定制
  
## 2.1 logging 模块级别的日志
- 以下几个函数为模块级别的函数，可以直接使用
  - logging.debug(msg, *arg, **kwargs) 创建一条级别为debug的日志记录
  - logging.info(msg, *arg, **kwargs) 创建一条级别为info的日志记录
  - logging.warning(msg, *arg, **kwargs) 创建一条级别为warning的日志记录
  - logging.error(msg, *arg, **kwargs) 创建一条级别为error的日志记录
  - logging.critical(msg, *arg, **kwargs) 创建一条级别为critical的日志记录
  
  - logging.log(msg, *arg, **kwargs) 创建一条级别为lelvel的日志记录  
  - logging.basicConfig(**kwargs) 对 root logger进行一次性配置
  
  - logging.basicConfig(**kwargs)
    - 只在第一次调用的时候起作用
    - 不配置则使用默认值，默认配置为：
      - 输出： sys.stderr
      - 级别： WARNING
      - format(格式)： level:log_name:content    
      - format 常用的参数：
       
  
        %(asctime)s     字符串形式的当前时间，默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒
        %(funcName)s    调用日志输出函数的函数名
        %(created)f     当前时间，用UNIX标准的表示时间的浮 点数表示        
        %(filename)s    调用日志输出函数的模块的文件名        
        %(levelname)s   文本形式的日志级别
        %(levelno)s     数字形式的日志级别
        %(lineno)d      调用日志输出函数的语句所在的代码行
        %(message)s     用户输出的消息
        %(module)s      调用日志输出函数的模块名
        %(pathname)s    调用日志输出函数的模块的完整路径名，可能没有
        %(process)d     进程ID。可能没有        
        %(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数
        %(thread)d      线程ID。可能没有
        %(threadName)s  线程名。可能没有
        
## logging 模块的处理流程
- 四大组件
  - 日志器（Logger）: 产生日志的一个接口
  - 处理器（Handler）: 把产生的日志发送到相应的目的地
  - 过滤器（Filter）: 更精细的控制哪些日志输出
  - 格式器（Formatter）: 格式化输出的信息
  
- Logger
  - 产生一个日志
  - 操作
  
  
            Logger.setLevel() 设置日志器将会处理的日志消息的最低严重级别
            Logger.addHandler() 和 Logger.removeHandler() 为该logger对象添加和移除一个Handler
            Logger.addFilter() 和 Logger.removeFilter() 为该logger对象添加和移除一个Filter
            Logger.debug: 产生一条debug级别的日志，同理info,error等都一样
            Logger.exception(): 创建类似于Logger.error的日志消息
            Logger.log(): 获取一个明确的日志level参数类，创建一个日志记录
  
  - 如何得到一个logger对象
    - 1.实例化
    - 2.logging.getLogger()
    
- Handler类
  - 把log发送到指定位置
  - 方法
    - setLevel
    - setFormat
    - addFilter, removeFilter
  - 不需要直接使用，Handler是基类
  
  
        logging.StreamHandler   将日志消息发送到stream, 如std.out, std.err 或任何file-like对象
        logging.FileHandler 将日志消息发送到磁盘文件，默认情况下文件大小会无限值增长
        logging.handlers.RotatingFileHandler    将日志消息发送到磁盘文件，并支持日志文件按大小切割
        logging.handlers.TimedRotatingFileHandler   将日志消息发送到磁盘文件，并支持日志文件按时间切割
        logging.handlers.HTTPHandler    将日志消息以GET或POSF方法发送给一个HTTP服务器
        logging.handlers.STMPHandler    将日志消息发送给一个指定的email地址 
        logging.NullHandler 该 Handler 实例会忽略 error messages，通常被想使用 logging 的 library 开发者使用来避免'No handlers could be found for logger XXX'信息的出现。
        
- Format类
  - 直接实例化
  - 可以继承Format添加特殊内容
  - 三个参数：
    - fmf: 指定消息格式化字符串，如果不指定，默认使用message的原始值
    - datefmf: 指定日期格式化字符串，如果不指定，默认使用 "%Y-%m-%d %H:%M:%S"
    - style: Python3.2 新增的参数，可取值为 % { $ ，如果不指定，默认使用 %
    
- Filter类
  - 可以被Handler和Logger使用
  - 控制传递过来的信息的具体内容
  - 案例02
        
        
        
  